@page "/"
@inject VortexLatticeClassLibrary.Overhead.ISimulationState SimState

<svg width="1000" height="500">
    <polyline points="@string.Join(' ', coordinates)"
                style="fill:none;stroke:black;stroke-width:3" />
    <polyline points="@string.Join(' ', camberLine)"
                style="fill:none;stroke:black;stroke-width:3" />
    @foreach (VortexLatticeClassLibrary.Utilities.WingTile t in SimState.IOManager.WingTiles)
    {
        <line x1="@(250 + t.R.Coordinates[0]*500)" 
              y1="@(400 - t.R.Coordinates[2]*500)" 
              x2="@(250 + (t.R.Coordinates[0] + t.N.Coordinates[0])*500)" 
              y2="@(400 - (t.R.Coordinates[2] + t.N.Coordinates[2])*500)" 
              style="stroke:rgb(255,0,0);stroke-width:2" />
    }
    @for (int i = 0; i < SimState.IOManager.WingTiles.Length; i++)
    {
        <line x1="@(250 + SimState.IOManager.WingTiles[i].R.Coordinates[0]*500)" 
              y1="@(400 - SimState.IOManager.WingTiles[i].R.Coordinates[2]*500)" 
              x2="@(250 + (SimState.IOManager.WingTiles[i].R.Coordinates[0] + SimState.IOManager.Forces[i].Coordinates[0])*500)" 
              y2="@(400 - (SimState.IOManager.WingTiles[i].R.Coordinates[2] + SimState.IOManager.Forces[i].Coordinates[2])*500)" 
              style="stroke:rgb(0,0,255);stroke-width:2" />
    }
</svg>

wingspan
<input @bind-value="wingSpan" @bind-value:event="onchange" />
chord
<input @bind-value="chord" @bind-value:event="onchange" />
number of tiles spanwise
<input @bind-value="numberOfTilesSpanwise" @bind-value:event="onchange" />
number of tiles chordwise
<input @bind-value="numberOfTilesChordwise" @bind-value:event="onchange" />
rho
<input @bind-value="rho" @bind-value:event="onchange" />
magnitude of V_infinity
<input @bind-value="magnitudeOfVInfinity" @bind-value:event="onchange" />
AOA
<input @bind-value="aoa" @bind-value:event="onchange" />
AOY
<input @bind-value="aoy" @bind-value:event="onchange" />

<textarea @bind-value="File" @bind-value:event="onchange" rows="20" cols="100"></textarea>
<button type="button" @onclick="OnButtonClicked">Submit</button>
<button type="button" @onclick="@(() => this.StateHasChanged())"></button>

@code {
    private string File { get; set; }
    private List<string> coordinates { get; set; } = new List<string>();
    private List<string> camberLine { get; set; } = new List<string>();

    private double wingSpan { get; set; } = 7;
    private double chord { get; set; } = 1;
    private int numberOfTilesSpanwise { get; set; } = 10;
    private int numberOfTilesChordwise { get; set; } = 20;
    private double rho { get; set; } = 1.225;
    private double magnitudeOfVInfinity { get; set; } = 30;
    private double aoa { get; set; } = 0;
    private double aoy { get; set; } = 0;

    private void OnButtonClicked()
    {
        SimState.IOManager.ParseAirfoilDatFile(File, 
                                               wingSpan, 
                                               chord, 
                                               numberOfTilesSpanwise, 
                                               numberOfTilesChordwise, 
                                               rho, 
                                               magnitudeOfVInfinity, 
                                               aoa, 
                                               aoy
                                               );

        coordinates.Clear();
        for (int i = 0; i < SimState.IOManager.Coordinates.GetLength(0); i++)
        {
            coordinates.Add(MapCoordinatesToSVG(SimState.IOManager.Coordinates[i, 0], SimState.IOManager.Coordinates[i, 1]));
        }
        camberLine.Clear();
        for (int i = 0; i < SimState.IOManager.CamberLine.GetLength(0); i++)
        {
            camberLine.Add(MapCoordinatesToSVG(SimState.IOManager.CamberLine[i, 0], SimState.IOManager.CamberLine[i, 1]));
        }
    }

    private string MapCoordinatesToSVG(double x, double y)
    {
        return $"{250 + x * 500},{400 - y * 500}";
    }
}