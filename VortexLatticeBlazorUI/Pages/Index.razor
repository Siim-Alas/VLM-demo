@page "/"
@using VortexLatticeBlazorUI.Models
@inject VortexLatticeClassLibrary.Overhead.ISimulationState SimState

<svg width="1000" height="800">
    <polyline points="@string.Join(' ', coordinates)"
                style="fill:none;stroke:black;stroke-width:3" />
    <polyline points="@string.Join(' ', camberLine)"
                style="fill:none;stroke:black;stroke-width:3" />
    <line x1="@(250 - Math.Cos(model.AOA * (Math.PI / 180)) * model.MagnitudeOfVInfinity * 10)" 
          y1="@(500 + Math.Sin(model.AOA * (Math.PI / 180)) * model.MagnitudeOfVInfinity * 10)" 
          x2="250" 
          y2="500" 
          style="stroke:rgb(0,255,0);stroke-width:2"/>
    @foreach (VortexLatticeClassLibrary.Utilities.WingTile t in SimState.IOManager.WingTiles)
    {
        <line x1="@(250 + t.R.Coordinates[0]*500)" 
              y1="@(500 - t.R.Coordinates[2]*500)" 
              x2="@(250 + (t.R.Coordinates[0] + t.N.Coordinates[0])*500)" 
              y2="@(500 - (t.R.Coordinates[2] + t.N.Coordinates[2])*500)" 
              style="stroke:rgb(255,0,0);stroke-width:2" />
    }
    @for (int i = 0; i < SimState.IOManager.WingTiles.Length; i++)
    {
        <line x1="@(250 + SimState.IOManager.WingTiles[i].R.Coordinates[0]*500)" 
              y1="@(500 - SimState.IOManager.WingTiles[i].R.Coordinates[2]*500)" 
              x2="@(250 + (SimState.IOManager.WingTiles[i].R.Coordinates[0] + SimState.IOManager.Forces[i].Coordinates[0] / 10)*500)" 
              y2="@(500 - (SimState.IOManager.WingTiles[i].R.Coordinates[2] + SimState.IOManager.Forces[i].Coordinates[2] / 10)*500)" 
              style="stroke:rgb(0,0,255);stroke-width:2" />
    }
</svg>

<div class="card">
    <div class="card-header">
        <h4>Data</h4>
    </div>
    <div class="card-body">
        <div class="card-text">
            <p>
                CL = @SimState.IOManager.CL ; CDI = @SimState.IOManager.CDI ; CM = @SimState.IOManager.CM 
            </p>
        </div>
    </div>
</div>

<EditForm Model="@model" OnValidSubmit="OnButtonClicked">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label for="file">The airfoil coordinate file in Selig format:</label>
        <InputTextArea id="file" class="form-control" @bind-Value="model.File"></InputTextArea>
    </div>
    <div class="form-inline">
        <label for="wingSpan">The wingspan:</label>
        <InputNumber TValue="double" id="wingSpan" class="form-control" @bind-Value="model.WingSpan" />

        <label for="chord">Chord:</label>
        <InputNumber TValue="double" id="chord" class="form-control" @bind-Value="model.Chord" />

        <label for="numberOfTilesSpanwise">The number of tiles spanwise:</label>
        <InputNumber TValue="int" id="numberOfTilesSpanwise" class="form-control" @bind-Value="model.NumberOfTilesSpanwise" />

        <label for="numberOfTilesChordwise">The number of tiles chordwise:</label>
        <InputNumber TValue="int" id="numberOfTilesChordwise" class="form-control" @bind-Value="model.NumberOfTilesChordwise" />
        
        <label for="rho">The density of air:</label>
        <InputNumber TValue="double" id="rho" class="form-control" @bind-Value="model.Rho" />
        
        <label for="magnitudeOfVInfinity">The magnitude of V_infinity:</label>
        <InputNumber TValue="double" id="magnitudeOfVInfinity" class="form-control" @bind-Value="model.MagnitudeOfVInfinity" />
        
        <label for="aoa">The angle of attack (in degrees):</label>
        <InputNumber TValue="double" id="aoa" class="form-control" @bind-Value="model.AOA" />
        
        <label for="aoy">The sideslip angle (in degrees):</label>
        <InputNumber TValue="double" id="aoy" class="form-control" @bind-Value="model.AOY" />
    </div>
    <button type="submit">Compute!</button>
</EditForm>

@code {
    private string[] coordinates { get {
            string[] c = new string[SimState.IOManager.Coordinates.GetLength(0)];
            for (int i = 0; i < SimState.IOManager.Coordinates.GetLength(0); i++)
            {
                c[i] = MapCoordinatesToSVG(SimState.IOManager.Coordinates[i, 0] * model.Chord, 
                                           SimState.IOManager.Coordinates[i, 1] * model.Chord);
            }
            return c;
        } }

    private string[] camberLine { get {
            string[] c = new string[SimState.IOManager.CamberLine.GetLength(0)];
            for (int i = 0; i < SimState.IOManager.CamberLine.GetLength(0); i++)
            {
                c[i] = MapCoordinatesToSVG(SimState.IOManager.CamberLine[i, 0] * model.Chord, 
                                           SimState.IOManager.CamberLine[i, 1] * model.Chord);
            }
            return c;
        } }

    private SimulationParameterModel model = new SimulationParameterModel();

    private void OnButtonClicked()
    {
        SimState.IOManager.ParseAirfoilDatFile(model.File,
                                               model.WingSpan,
                                               model.Chord,
                                               model.NumberOfTilesSpanwise,
                                               model.NumberOfTilesChordwise,
                                               model.Rho,
                                               model.MagnitudeOfVInfinity,
                                               model.AOA * (Math.PI / 180),
                                               model.AOY * (Math.PI / 180)
                                               );
    }

    private string MapCoordinatesToSVG(double x, double y)
    {
        return $"{250 + x * 500},{500 - y * 500}";
    }
}